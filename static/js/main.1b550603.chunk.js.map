{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","useEffect","prevCards","resetTurn","setTimeout","console","log","prevTurns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAEe,SAASA,EAAT,GAAgE,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAU9D,OAEU,qBAAKC,UAAU,OAAf,SACD,sBAAKA,UAAYF,EAAS,UAAY,GAAtC,UACE,qBAAKG,IAAKL,EAAKK,IAAKD,UAAU,QAAQE,IAAI,eAC1C,qBAAKD,IAAI,8BAA8BD,UAAU,OAAOE,IAAI,YAAYC,QAb/D,WAEZJ,GACFF,EAAaD,WCFvB,IAAMQ,EAAa,CACjB,CAAE,IAAO,iCAAmCC,SAAS,GACrD,CAAE,IAAO,iCAAmCA,SAAS,GACrD,CAAE,IAAO,+BAAiCA,SAAS,GACnD,CAAE,IAAO,iCAAmCA,SAAS,GACrD,CAAE,IAAO,iCAAmCA,SAAS,GACrD,CAAE,IAAO,gCAAkCA,SAAS,IA8FvCC,MA1Ff,WAEK,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA2BF,mBAAS,GAApC,mBAAQG,EAAR,KAAeC,EAAf,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAiCR,oBAAS,GAA1C,mBAAOR,EAAP,KAAiBiB,EAAjB,KAGKC,EAAe,WAEjB,IAAMC,EAAgB,UAAKd,EAAeA,GACrCe,MAAM,kBAAMC,KAAKC,SAAW,MAC5BC,KAAK,SAAC1B,GAAD,mBAAC,eAAeA,GAAhB,IAAuB2B,GAAIH,KAAKC,cAE5CR,EAAa,MACbE,EAAa,MACbN,EAASS,GACTP,EAAS,IAILd,EAAe,SAACD,GAEjBgB,EAAYG,EAAanB,GAAQiB,EAAajB,IAInD4B,qBAAU,WAELZ,GAAaE,IAEdE,GAAY,GACPJ,EAAUX,MAAQa,EAAUb,KAE5BQ,GAAU,SAAAgB,GACR,OAAOA,EAAUH,KAAK,SAAA1B,GACjB,OAAIA,EAAKK,MAAQW,EAAUX,IAClB,2BAAIL,GAAX,IAAiBS,SAAS,IAEnBT,QAKjB8B,KAGAC,YAAY,kBAAMD,MAAc,QAGrC,CAACd,EAAWE,IAEfc,QAAQC,IAAIrB,GAGZ,IAAMkB,EAAY,WAChBb,EAAa,MACbE,EAAa,MACbJ,GAAS,SAAAmB,GAAS,OAAIA,EAAY,KAClCd,GAAY,IAShB,OALEQ,qBAAY,WACVP,MACC,IAIH,sBAAKjB,UAAU,MAAf,UACE,6CACA,wBAAQG,QAASc,EAAjB,sBAEA,qBAAKjB,UAAU,YAAf,SACIQ,EAAMc,KAAK,SAAA1B,GAAI,OACZ,cAAC,EAAD,CACAA,KAAMA,EAENC,aAAcA,EACdC,QAAYF,IAASgB,GAAahB,IAASkB,GAAalB,EAAKS,QAC7DN,SAAaA,GAHRH,EAAK2B,SAOb,wCAAWb,SC/FrBqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1b550603.chunk.js","sourcesContent":["import './SingleCard.css'\r\n\r\nexport default function SingleCard({ card, handleChoice, flipped, disabled }) {\r\n\r\n    const handleClick = () => {\r\n\r\n        if(!disabled){\r\n          handleChoice(card)\r\n        }\r\n       \r\n    }\r\n\r\n    return (\r\n        \r\n              <div className=\"card\" >\r\n             <div className={ flipped? \"flipped\" : \"\"}>\r\n               <img src={card.src} className=\"front\" alt='card front' />\r\n               <img src=\"/Magic-Memory/img/cover.png\" className=\"back\" alt='card back' onClick={handleClick}/>\r\n             </div>\r\n\r\n           </div>\r\n        \r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\nimport './App.css'\nimport SingleCard from './components/SingleCard'\n\n\nconst cardImages = [\n  { \"src\": \"/Magic-Memory/img/helmet-1.png\" , matched: false },\n  { \"src\": \"/Magic-Memory/img/potion-1.png\" , matched: false},\n  { \"src\": \"/Magic-Memory/img/ring-1.png\" , matched: false},\n  { \"src\": \"/Magic-Memory/img/scroll-1.png\" , matched: false},\n  { \"src\": \"/Magic-Memory/img/shield-1.png\" , matched: false},\n  { \"src\": \"/Magic-Memory/img/sword-1.png\" , matched: false},\n]\n\n\nfunction App() {\n\n     const [cards, setCards] = useState([])\n     const [ turns, setTurns] = useState(0)\n     const [choiceOne, setChoiceOne] = useState(null)\n     const [choiceTwo, setChoiceTwo] = useState(null)\n     const [disabled, setDisabled ] = useState(false)\n\n    // shuffle cards\n    const shuffleCards = () => {\n\n        const shuffledCards = [ ...cardImages, ...cardImages]\n            .sort( () => Math.random() - 0.5)\n            .map( (card) => ({ ...card,  id: Math.random() }) )\n\n      setChoiceOne(null)\n      setChoiceTwo(null)\n      setCards(shuffledCards)\n      setTurns(0)\n    }\n  \n    //handle choice\n    const handleChoice = (card) =>{\n\n         choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n    }\n\n    // compare 2 selected cards\n    useEffect(() => {\n\n      if(choiceOne && choiceTwo){\n\n        setDisabled(true)\n        if ( choiceOne.src === choiceTwo.src ) {\n            \n             setCards( prevCards => {\n               return prevCards.map( card => { \n                    if (card.src === choiceOne.src){\n                      return {...card, matched: true}\n                    } else{\n                      return card\n                    }\n               })\n             })\n\n            resetTurn()\n          } else{\n            \n            setTimeout( () => resetTurn() , 1000) \n          }\n      }\n    }, [choiceOne, choiceTwo])\n\n    console.log(cards)\n\n    //reset choices and increase turn\n    const resetTurn = () =>{\n      setChoiceOne(null)\n      setChoiceTwo(null)\n      setTurns(prevTurns => prevTurns + 1)\n      setDisabled(false)\n    }\n\n   // start a new game automatically\n    useEffect ( () => {\n      shuffleCards()\n    }, [])\n\n\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n\n      <div className=\"card-grid\">\n         {cards.map( card => (\n             <SingleCard \n             card={card} \n             key={card.id} \n             handleChoice={handleChoice}\n             flipped = { card === choiceOne || card === choiceTwo || card.matched  }\n             disabled = { disabled }\n             />\n         ))}\n      </div>\n          <p>turns: {turns}</p>\n    </div>\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}